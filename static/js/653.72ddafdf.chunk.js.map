{"version":3,"file":"static/js/653.72ddafdf.chunk.js","mappings":"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","sources":["components/SelectedMovie/SelectedMovie.styled.js","components/SelectedMovie/SelectedMovie.js","pages/MovieDetailPage.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  margin-bottom: 10px;\n  border-radius: 3px;\n  border-color: green;\n`;\n","import { Suspense, useRef } from 'react';\nimport { ProgressBar } from 'react-loader-spinner';\nimport { NavLink, Outlet, useLocation } from 'react-router-dom';\nimport { StyledLink } from './SelectedMovie.styled';\n\nexport default function SelectedMovie({ movie, genres }) {\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/movies');\n  const imgUrl = 'https://image.tmdb.org/t/p/w300';\n  return (\n    <div>\n      {movie ? (\n        <>\n          <div>\n            <div>\n              <StyledLink to={backLinkLocation.current}>Go back</StyledLink>\n            </div>\n\n            <img\n              src={\n                movie.poster_path\n                  ? imgUrl + movie.poster_path\n                  : 'https://www.shutterstock.com/image-vector/no-image-available-vector-illustration-260nw-744886198.jpg'\n              }\n              alt={movie.title}\n              width={300}\n              height={450}\n            />\n          </div>\n          <div>\n            <h1>{movie.title}</h1>\n            <p>User score: {movie.vote_average}/10</p>\n            <h2>Overview</h2>\n            <p>{movie.overview}</p>\n            <h2>Genres</h2>\n            <ul>\n              {genres.map(genre => (\n                <li key={genre.id}>\n                  <p>{genre.name}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </>\n      ) : (\n        <ProgressBar\n          height=\"400\"\n          width=\"400\"\n          ariaLabel=\"progress-bar-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"progress-bar-wrapper\"\n          borderColor=\"#F4442E\"\n          barColor=\"#51E5FF\"\n        />\n      )}\n      <ul>\n        <li>\n          <NavLink to=\"casts\">cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">revievs</NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n}\n","import { fetchOneMovie } from 'api';\nimport SelectedMovie from 'components/SelectedMovie/SelectedMovie';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function MovieDetailPage() {\n  const [selecteMovie, setselecteMovie] = useState(null);\n  const [genres, setGenres] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const result = async () => {\n      try {\n        const movie = await fetchOneMovie(movieId);\n        if (movie !== undefined) {\n          setselecteMovie(movie);\n          setGenres(movie.genres);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    result();\n  }, [movieId]);\n\n  return (\n    <div>\n      <SelectedMovie movie={selecteMovie} genres={genres} />\n    </div>\n  );\n}\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","SelectedMovie","_ref","_location$state$from","_location$state","movie","genres","location","useLocation","backLinkLocation","useRef","state","from","_jsxs","children","_Fragment","_jsx","to","current","src","poster_path","alt","title","width","height","vote_average","overview","map","genre","name","id","ProgressBar","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","NavLink","Suspense","fallback","Outlet","MovieDetailPage","_useState","useState","_useState2","_slicedToArray","selecteMovie","setselecteMovie","_useState3","_useState4","setGenres","movieId","useParams","useEffect","result","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","fetchOneMovie","undefined","sent","t0","console","log","stop","apply","arguments"],"sourceRoot":""}